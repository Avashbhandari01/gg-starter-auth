generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(User)
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  Cart                  Cart[]
  Order                 Order[]
  Topup                 Topup[]
  Product               Product[]
  cards                 cards[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String   @id @default(cuid())
  userId  String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProductStatus {
  AVAILABLE
  NOTAVAILABLE
}

enum ProductType {
  VIRTUAL
  PHYSICAL
}

enum ProductUnit {
  PIECE
  KG
  GRAM
}

model Product {
  id              String        @id @default(cuid())
  name            String
  description     String?
  image           String?
  costPrice       Float
  unit            ProductUnit   @default(PIECE) //added
  quantityInStock Int
  validity        String?
  discount        String?
  salePrice       Float?
  margin          String?
  type            ProductType   @default(VIRTUAL) //added
  status          ProductStatus @default(AVAILABLE)

  inventory Inventory?

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
 
  userId String //added
  user   User   @relation(fields: [userId], references: [id])

  suppliers Supplier[] @relation("ProductSuppliers")
  orders    Order[]    @relation("ProductOrders")
  carts     Cart[]
  Variants  Variant[]
}

enum CartStatus {
  PENDING
  CHECKOUT
}

model Cart {
  id        String     @id @default(cuid())
  quantity  Int
  status    CartStatus @default(PENDING)
  productId String
  variantId String?
  userId    String?
  orderId   String?
  order     Order?     @relation("OrderCarts", fields: [orderId], references: [id])
  product   Product    @relation(fields: [productId], references: [id])
  user      User?      @relation(fields: [userId], references: [id])
  variant   Variant?   @relation(fields: [variantId], references: [id])
}

model Variant {
  id              String   @id @default(uuid())
  name            String
  salePrice       Float
  priceDifference Float?
  status          String?
  costPrice       Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  productId       String
  carts           Cart[]
  product         Product  @relation(fields: [productId], references: [id])
}

model Category {
  id           String    @id @default(cuid())
  categoryName String
  description  String?
  products     Product[]
}

model Inventory {
  id          String   @id @default(cuid())
  status      String
  quantity    Int
  restockDate DateTime
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id])
}

model Supplier {
  id           String    @id @default(cuid())
  supplierName String
  email        String?
  phone        String?
  products     Product[] @relation("ProductSuppliers")
}

model Order {
  id              String        @id @default(cuid())
  orderDate       DateTime      @default(now())
  quantity        Int
  deliveryDate    DateTime?
  streetAddress   String
  state           String
  city            String
  status          OrderStatus   @default(PENDING)
  userId          String
  paymentMethodId String
  carts           Cart[]        @relation("OrderCarts")
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  products        Product[]     @relation("ProductOrders")
}

model PaymentMethod {
  id          String  @id @default(cuid())
  paymentType String
  orders      Order[]
}

enum UserRole {
  Admin
  User
}

enum ProductStatus {
  AVAILABLE
  NOTAVAILABLE
}

enum CartStatus {
  PENDING
  CHECKOUT
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id            String      @id @default(cuid())
  orderDate     DateTime    @default(now())
  quantity      Int
  deliveryDate  DateTime?
  streetAddress String
  state         String
  city          String
  status        OrderStatus @default(PENDING)

  products Product[] @relation("ProductOrders") //

  // variants Variant[] @relation("OrderVariants")

  userId String
  user   User   @relation(fields: [userId], references: [id])

  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String

  carts Cart[] @relation("OrderCarts")
}

model PaymentMethod {
  id          String @id @default(cuid())
  paymentType String // e.g., 'Cash', 'Credit Card'

  orders Order[]
}

//Top up modal
model Topup {
  id        String      @id @default(cuid())
  amount    Float
  userId    String
  type      TopupType   @default(CREDIT)
  status    TopupStatus @default(PENDING)
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
}

enum TopupStatus {
  PENDING
  SUCCESS
  FAILED
}

enum TopupType {
  CREDIT
  CASH
  GGCOIN
}

//card modal membership
model cards {
  id               String    @id @default(cuid())
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  type             cardType  @default(BUSINESS)
  userName         String?   @db.VarChar(50)
  userField        String?   @db.VarChar(50)
  email            String?   @db.VarChar(50)
  phone            String?   @db.VarChar(50)
  location         String?   @db.VarChar(50)
  studentFaculty   String?   @db.VarChar(50)
  emergencyContact String?   @db.VarChar(50)
  emergenctName    String?   @db.VarChar(50)
  backgroundImage  String[]
  enrollDate       DateTime?
  expireDate       DateTime?
}

enum cardType {
  STUDENT
  BUSINESS
  DEVELOPER
  GAMER
}
