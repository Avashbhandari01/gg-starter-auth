generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String  @unique @db.Uuid
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  Admin
  User
}

model User {
  id                   String    @id @default(cuid())
  userName             String[]
  email                String[]  @unique
  phone                String[]
  emailVerified        DateTime?
  image                String[]
  password             String?
  role                 UserRole  @default(User)
  isTwoFactorEnabled   Boolean   @default(false)
  location             String?   @db.VarChar(50)
  faculty              String?   @db.VarChar(50)
  emergencyContact     String?   @db.VarChar(50)
  emergencyContactName String?   @db.VarChar(50)
  enrollDate           DateTime?
  expireDate           DateTime?

  // Relations
  accounts              Account[]
  Cart                  Cart[]
  Order                 Order[]
  Topup                 Topup[]
  cards                 cards[]
  visitProfile          visitprofile[]
  TwoFactorConfirmation TwoFactorConfirmation?
  UserPaymentMethod     UserPaymentMethod[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String   @id @default(cuid())
  expires DateTime
  userId  String   @unique @db.Uuid
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id              String           @id @default(cuid())
  name            String
  description     String?
  image           String?
  costPrice       Float
  quantityInStock Int
  validity        String?
  salePrice       Float?
  margin          String?
  categoryId      String
  isFeatured      Boolean?         @default(false)
  slug            String?
  taxId           String?
  discount        Float?
  status          Boolean          @default(true)
  carts           Cart[]
  inventory       Inventory?
  category        Category         @relation(fields: [categoryId], references: [id])
  Tax             Tax?             @relation(fields: [taxId], references: [id])
  ProductVariant  ProductVariant[]
  Business        Order[]          @relation("ProductOrders")
  Supplier        Supplier[]       @relation("ProductToSupplier")
}

model Cart {
  id             String           @id @default(cuid())
  quantity       Int
  status         CartStatus       @default(PENDING)
  productId      String
  orderId        String?
  amount         Float?
  userId         String           @db.Uuid
  order          Order?           @relation("OrderCarts", fields: [orderId], references: [id], onDelete: Cascade)
  product        Product          @relation(fields: [productId], references: [id])
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProductVariant ProductVariant[] @relation("CartToProductVariant")
}

model Variant {
  id             String           @id @default(uuid())
  name           String
  status         Boolean          @default(true)
  ProductVariant ProductVariant[]
  VariantOption  VariantOption[]
}

model Inventory {
  id          String   @id @default(cuid())
  status      String
  quantity    Int
  restockDate DateTime
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id])
}

model Supplier {
  id           String    @id @default(cuid())
  supplierName String
  email        String?
  phone        String?
  address      String?
  Product      Product[] @relation("ProductToSupplier")
}

model Order {
  id            String        @id @default(cuid())
  orderDate     DateTime      @default(now())
  quantity      Int
  deliveryDate  DateTime?
  streetAddress String
  state         String
  city          String
  status        OrderStatus   @default(PENDING)
  amount        Float?
  paymentId     String?
  paymentStatus Boolean       @default(false)
  userId        String        @db.Uuid
  carts         Cart[]        @relation("OrderCarts")
  PaymentType   PaymentType?  @relation(fields: [paymentId], references: [id])
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  SalesInvoice  SalesInvoice?
  orders        Product[]     @relation("ProductOrders")
}

model PaymentType {
  id                String              @id @default(cuid())
  paymentType       String
  Order             Order[]
  UserPaymentMethod UserPaymentMethod[]
}

model ProductVariant {
  id              String         @id @default(cuid())
  var_id          String
  var_opt         String?
  productId       String
  var_img         String?
  salePrice       Float
  stock           Int?
  status          Boolean        @default(true)
  priceDifference Float?
  costPrice       Float?
  discount        Float?
  Product         Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  Variant         Variant        @relation(fields: [var_id], references: [id])
  VariantOption   VariantOption? @relation(fields: [var_opt], references: [id])
  Cart            Cart[]         @relation("CartToProductVariant")
}

model SalesInvoice {
  id          String   @id @default(cuid())
  invoiceDate DateTime @default(now())
  InvoiceId   String   @unique
  totalAmount Float?
  orderId     String   @unique
  Order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Tax         Tax[]    @relation("SalesInvoiceToTax")
}

model Tax {
  id           String         @id @default(cuid())
  name         String
  rate         Float
  description  String?
  Product      Product[]
  SalesInvoice SalesInvoice[] @relation("SalesInvoiceToTax")
}

model UserPaymentMethod {
  id             String      @id @default(cuid())
  userId         String      @db.Uuid
  typeId         String
  provider       String?
  account_number String?
  expiry_date    DateTime?
  is_default     Boolean     @default(true)
  PaymentType    PaymentType @relation(fields: [typeId], references: [id])
  User           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VariantOption {
  id             String           @id @default(cuid())
  value          String
  var_id         String
  variantName    String?
  ProductVariant ProductVariant[]
  Variant        Variant          @relation(fields: [var_id], references: [id])
}

model Category {
  id           String    @id @default(cuid())
  categoryName String
  description  String?
  products     Product[]
}

model visitprofile {
  visit_id  String        @id @db.Uuid
  gg_id     String        @db.Uuid
  visit_by  String?
  type      ReactionType?
  count     Int
  createdAt DateTime      @default(now())
  updatedAt DateTime
  User      User          @relation(fields: [gg_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

//Top up modal
model Topup {
  id        String      @id @default(cuid())
  amount    Float
  userId    String
  type      TopupType   @default(CREDIT)
  status    TopupStatus @default(PENDING)
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
}

enum TopupStatus {
  PENDING
  SUCCESS
  FAILED
}

enum TopupType {
  CREDIT
  CASH
  GGCOIN
}

//card modal membership
model cards {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  type            cardType @default(BUSINESS)
  backgroundImage String[]

  enrollDate DateTime?
  expireDate DateTime?
}

enum cardType {
  STUDENT
  BUSINESS
  DEVELOPER
  GAMER
}

enum ReactionType {
  GOODIDEA
  THANKS
  WOW
  HAHA
  LOVE
}

enum socialType {
  FACEBOOK
  INSTAGRAM
  GITHUB
  STEAM
  LINKDN
  GOOGLE
}

enum ProductStatus {
  AVAILABLE
  NOTAVAILABLE
}

enum CartStatus {
  PENDING
  CHECKOUT
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}
